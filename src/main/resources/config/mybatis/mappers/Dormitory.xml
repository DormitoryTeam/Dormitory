<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.noeasy.money.model.Dormitory">

	<sql id="where">
		where 1=1
	</sql>

	<sql id="where-with-id">
		and t1.id = #{id}
	</sql>

	<sql id="where-with-city-id">
		and t1.city_id = #{cityId}
	</sql>

	<sql id="where-with-keyword">
		and (t1.name like concat('%', #{keyword}, '%') or t1.address like concat('%', #{keyword}, '%') or t1.postcode like concat('%', #{keyword}, '%') or t1.description like concat('%', #{keyword}, '%'))
	</sql>

	<sql id="where-with-dormitory-type">
		and t1.type_id = #{dormitoryTypeId}
	</sql>

	<sql id="where-with-contract">
		and t1.contract_type_id = #{contractTypeId}
	</sql>

	<sql id="where-with-dormitory-name">
		and t1.name like concat('%', #{dormitoryName}, '%')
	</sql>

	<sql id="where-with-city-name">
		and t4.name like concat('%', #{cityName}, '%')
	</sql>

	<sql id="where-with-media-type">
		and dormitory_id = #{dormitoryId} and media_type = #{mediaType}
	</sql>

	<sql id="order-by-order-field">
		order by ${sortBy}
	</sql>

	<sql id="order-by-field">
		order by `${sortField}` asc
	</sql>

	<sql id="limit-split-page">
		limit #{pageBean.pageStartIndex}, #{pageBean.pageSize}
	</sql>

	<!-- Dormitory ############################################### -->

	<select id="queryDormitoryPage" parameterType='com.noeasy.money.model.DormitorySearchBean' resultMap="dormitory">
		select
		t1.id dor_id,
		t1.name dor_name,
		t1.address dor_address,
		t1.postcode dor_postcode,
		t1.equipment dor_equipment,
		t1.service dor_service,
		t1.currency dor_currency,
		t1.listPrice dor_listPrice,
		t1.salePrice dor_salePrice,
		t1.latitude dor_latitude,
		t1.longitude dor_longitude,
		t1.description dor_description,
		t1.city_id dor_cityId,
		t1.status dor_status,
		t2.name dor_city,
		coalesce(avg(t3.score), 0) dor_rating
		<if test="collegeId != null">
			,ifnull(t8.distance, 0) as distance
		</if>
		from
		dormitory t1
		left join
		city t2 on t2.id = t1.city_id
		left outer join
		dormitory_rating t3 on t3.dormitory_id = t1.id
		<if test="collegeId != null">
			left join
			distance_result t8 on t8.dormitory_id = t1.id and t8.college_id = #{collegeId}
		</if>
		<include refid="where" />
		<if test="id != null">
			<include refid="where-with-id" />
		</if>
		<if test="dormitoryName != null">
			<include refid="where-with-dormitory-name" />
		</if>
		<if test="cityId != null">
			<include refid="where-with-city-id" />
		</if>
		<if test="cityName != null">
			<include refid="where-with-city-name" />
		</if>
		<if test="keyword != null">
			<include refid="where-with-keyword" />
		</if>
		<if test="status != null">
			and t1.status = #{status}
		</if>
		<if test="excludeStatus != null">
			and t1.status != #{excludeStatus}
		</if>
		group by t1.id
		<if test="sortBy != null">
			<include refid="order-by-order-field" />
		</if>
		<if test="pageBean != null">
			<include refid="limit-split-page" />
		</if>
	</select>

	<select id="queryDormitory" parameterType='com.noeasy.money.model.DormitorySearchBean' resultMap="dormitory">
		select
		t1.id dor_id,
		t1.name dor_name,
		t1.address dor_address,
		t1.postcode dor_postcode,
		t1.equipment dor_equipment,
		t1.service dor_service,
		t1.currency dor_currency,
		t1.listPrice dor_listPrice,
		t1.salePrice dor_salePrice,
		t1.latitude dor_latitude,
		t1.longitude dor_longitude,
		t1.description dor_description,
		t1.city_id dor_cityId,
		t1.status dor_status,
		t2.name dor_city,
		coalesce(avg(t3.score), 0) dor_rating,
		t4.id ri_id,
		t4.dormitory_id
		ri_dormitoryId,
		t4.room_type_id ri_roomTypeId,
		t4.equipment ri_equipment,
		t4.service ri_service,
		t4.description as ri_description,
		t4.checkin_date ri_checkinDate,
		t4.orientations ri_orientation,
		t4.floors ri_floors,
		t4.bed_type ri_bedType,
		t4.house_area ri_houseArea,
		t4.ensuite_bathroom ri_ensuitBathroom,
		t4.kitchen_people_number ri_kitchenPeople,
		t4.floor_arrangement ri_floorArrange,
		t4.orientation_arrangement ri_orientationArrange,
		t4.room_language_arrangement ri_roomLanguageArrange,
		t4.kitchen_equipment ri_kitchenEquipment,
		t4.bathroom_equipment ri_bathroomEquipment,
		t4.status ri_status,
		t5.id rp_id,
		t5.room_info_id rp_roomInfoId,
		t5.contract_type_id rp_contractId,
		t5.currency rp_currency,
		t5.listPrice rp_listPrice,
		t5.salePrice rp_salePrice,
		t5.status rp_status,
		t6.name ri_roomType,
		t7.name rp_contract
		<if test="collegeId != null">
			,ifnull(t8.distance, 0) as distance
		</if>
		from
		dormitory t1
		left join
		city t2 on t2.id = t1.city_id
		left outer join
		dormitory_rating t3 on t3.dormitory_id = t1.id
		left join
		room_info t4 ON
		t4.dormitory_id = t1.id
		left join
		room_price t5 on t5.room_info_id = t4.id
		left join
		room_type t6 on t6.id = t4.room_type_id
		left join
		contract_type t7 ON
		t7.id = t5.contract_type_id
		<if test="collegeId != null">
			left join
			distance_result t8 on t8.dormitory_id = t1.id and t8.college_id = #{collegeId}
		</if>
		<include refid="where" />
		<if test="id != null">
			<include refid="where-with-id" />
		</if>
		<if test="dormitoryName != null">
			<include refid="where-with-dormitory-name" />
		</if>
		<if test="cityId != null">
			<include refid="where-with-city-id" />
		</if>
		<if test="cityName != null">
			<include refid="where-with-city-name" />
		</if>
		<if test="keyword != null">
			<include refid="where-with-keyword" />
		</if>
		<if test="status != null">
			and t1.status = #{status}
		</if>
		<if test="excludeStatus != null">
			and t1.status != #{excludeStatus}
		</if>
		<if test="roomStatus != null">
			and t4.status = #{roomStatus}
		</if>
		<if test="excludeRoomStatus != null">
			and t4.status != #{excludeRoomStatus}
		</if>
		and t5.status = 1
		group by t5.id
	</select>

	<select id="queryDormitoryCount" parameterType='com.noeasy.money.model.DormitorySearchBean' resultType="int">
		select count(*)
		from
		(select t1.id
		from
		dormitory t1
		left join
		city t2 on t2.id = t1.city_id
		left join
		dormitory_rating t3 on t3.dormitory_id = t1.id
		<if test="collegeId != null">
			left join
			distance_result t8 on t8.dormitory_id = t1.id and t8.college_id = #{collegeId}
		</if>
		<include refid="where" />
		<if test="id != null">
			<include refid="where-with-id" />
		</if>
		<if test="dormitoryName != null">
			<include refid="where-with-dormitory-name" />
		</if>
		<if test="cityId != null">
			<include refid="where-with-city-id" />
		</if>
		<if test="cityName != null">
			<include refid="where-with-city-name" />
		</if>
		<if test="keyword != null">
			<include refid="where-with-keyword" />
		</if>
		<if test="status != null">
			and t1.status = #{status}
		</if>
		<if test="excludeStatus != null">
			and t1.status != #{excludeStatus}
		</if>
		group by t1.id
		) t
	</select>

	<update id="updateDormitory" parameterType="com.noeasy.money.model.DormitoryBean">
		update dormitory set
			name = #{name},
			address = #{address},
			postcode = #{postcode},
			equipment = #{equipment},
			service = #{service},
			listPrice = #{listPrice},
			salePrice = #{salePrice},
			latitude = #{latitude},
			longitude = #{longitude},
			currency = #{currency},
			description = #{description},
			city_id = #{cityId},
			status = #{status}
		where id = #{id}
	</update>

	<insert id="saveDormitory" keyProperty="id" useGeneratedKeys='true' parameterType="com.noeasy.money.model.DormitoryBean">
		insert into dormitory (city_id, name, address, postcode, listPrice, salePrice, currency, latitude, longitude, equipment, service, description, status) values (
			#{cityId,javaType=int,jdbcType=INTEGER},
			#{name,javaType=String,jdbcType=VARCHAR},
			#{address,javaType=String,jdbcType=VARCHAR},
			#{postcode,javaType=String,jdbcType=VARCHAR},
			#{listPrice,javaType=Double,jdbcType=DECIMAL},
			#{salePrice,javaType=Double,jdbcType=DECIMAL},
			#{currency,javaType=String,jdbcType=VARCHAR},
			#{latitude,javaType=Double,jdbcType=INTEGER},
			#{longitude,javaType=Double,jdbcType=INTEGER},
			#{equipment,javaType=int,jdbcType=INTEGER},
			#{service,javaType=int,jdbcType=INTEGER},
			#{description,javaType=String,jdbcType=VARCHAR},
			#{status}
		);
	</insert>

	<!-- RoomInfo #################################################### -->

	<sql id="select-room-info">
		select
		t4.id ri_id,
		t4.dormitory_id ri_dormitoryId,
		t4.room_type_id ri_roomTypeId,
		t4.equipment ri_equipment,
		t4.service ri_service,
		t4.description ri_description,
		t4.checkin_date ri_checkinDate,
		t4.orientations ri_orientation,
		t4.floors ri_floors,
		t4.bed_type ri_bedType,
		t4.house_area ri_houseArea,
		t4.ensuite_bathroom ri_ensuitBathroom,
		t4.kitchen_people_number ri_kitchenPeople,
		t4.floor_arrangement ri_floorArrange,
		t4.orientation_arrangement ri_orientationArrange,
		t4.room_language_arrangement ri_roomLanguageArrange,
		t4.kitchen_equipment ri_kitchenEquipment,
		t4.bathroom_equipment ri_bathroomEquipment,
		t4.status as ri_status,
		t5.id rp_id,
		t5.room_info_id rp_roomInfoId,
		t5.contract_type_id rp_contractId,
		t5.currency rp_currency,
		t5.listPrice rp_listPrice,
		t5.salePrice rp_salePrice,
		t5.status rq_statis,
		t6.name ri_roomType,
		t7.name rp_contract
	</sql>

	<select id="queryRoomInfos" resultMap="roomInfo">
		<include refid="select-room-info" />
		from
		room_info t4
		left join
		room_price t5 on t5.room_info_id = t4.id
		left join
		room_type t6 on t6.id = t4.room_type_id
		left join
		contract_type t7 on t7.id = t5.contract_type_id
		where t4.dormitory_id in
		<foreach item="item" index="index" collection="dormitoryIds" open="(" separator="," close=")">
			#{item}
		</foreach>
		<if test="status != null">
			and t5.status = #{status}
		</if>
	</select>

	<select id="queryRoomInfoByDormitory" resultMap="roomInfo" parameterType="map">
		<include refid="select-room-info" />
		from
		room_info t4
		left join
		room_price t5 on t5.room_info_id = t4.id
		left join
		room_type t6 on t6.id = t4.room_type_id
		left join
		contract_type t7 on t7.id = t5.contract_type_id
		where t4.dormitory_id = #{dormitoryId}
		<if test="status != null">
			and t4.status = #{roomStatus}
		</if>
		<if test="excludeStatus != null">
			and t4.status != #{excludeRoomStatus}
		</if>
	</select>

	<insert id="saveRoomInfo" keyProperty="id" useGeneratedKeys='true' parameterType="com.noeasy.money.model.RoomInfoBean">
		insert into room_info (dormitory_id, room_type_id, equipment, service, description, checkin_date, orientations, floors, bed_type, house_area,
			ensuite_bathroom, kitchen_people_number, floor_arrangement, orientation_arrangement, room_language_arrangement, status, kitchen_equipment, bathroom_equipment) values (
			#{dormitoryId},
			#{roomTypeId},
			#{equipment},
			#{service},
			#{description},
			#{checkinDate, javaType=Date,jdbcType=TIMESTAMP},
			#{orientation},
			#{floors},
			#{bedType},
			#{houseArea},
			#{ensuitBathroom},
			#{kitchenPeople},
			#{floorArrange},
			#{orientationArrange},
			#{roomLanguageArrange},
			#{status},
			#{kitchenEquipment},
			#{bathroomEquipment}
		)
	</insert>

	<update id="updateRoomInfo" parameterType="com.noeasy.money.model.RoomInfoBean">
		update room_info set 
			dormitory_id = #{dormitoryId},
			room_type_id = #{roomTypeId},
			equipment = #{equipment},
			service = #{service},
			description = #{description},
			checkin_date = #{checkinDate, javaType=Date,jdbcType=TIMESTAMP},
			orientations = #{orientation},
			floors = #{floors},
			bed_type = #{bedType},
			house_area = #{houseArea},
			ensuite_bathroom = #{ensuitBathroom},
			kitchen_people_number = #{kitchenPeople},
			floor_arrangement = #{floorArrange},
			orientation_arrangement = #{orientationArrange},
			room_language_arrangement = #{roomLanguageArrange},
			`status` = #{status},
			kitchen_equipment = #{kitchenEquipment},
			bathroom_equipment = #{bathroomEquipment}
		where id = #{id}
	</update>

	<delete id="removeRoomInfos">
		delete from room_info
		where id in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>

	<delete id="removeRoomInfo" parameterType="int">
		delete from room_info where id = #{id}
	</delete>

	<insert id="saveRoomPrice" keyProperty="id" useGeneratedKeys='true' parameterType="com.noeasy.money.model.RoomPrice">
		insert into room_price (room_info_id, contract_type_id, currency, listPrice, salePrice, status) values (
			#{roomInfoId}, #{contractId}, #{currency}, #{listPrice}, #{salePrice}, #{status}
		)
	</insert>

	<update id="updateRoomPrice" parameterType="com.noeasy.money.model.RoomPrice">
		update room_price set 
			room_info_id = #{roomInfoId},
			contract_type_id = #{contractId},
			currency = #{currency},
			listPrice = #{listPrice},
			salePrice = #{salePrice},
			status = #{status}
		where id = #{id}
	</update>

	<delete id="removeRoomPrices">
		delete from room_price
		where id in
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>

	<delete id="removeRoomPrice" parameterType="int">
		delete from room_price
		where id = #{id}
	</delete>


	<!-- Media path ########################################################### -->

	<select id="queryMediaPath" resultType="string" parameterType="java.util.Map">
		select media_path
		from dormitory_media
		<include refid="where" />
		<include refid="where-with-media-type" />
		<include refid="order-by-field" />
	</select>


	<insert id="insertImagePath" parameterType="java.util.List">
		insert into dormitory_media (dormitory_id, media_type, media_path, `index`) values
		<foreach collection="list" item="item" index="index" open="" close="" separator=",">
			(#{item.dormitoryId}, 1, #{item.path}, #{index})
		</foreach>
	</insert>

	<insert id="insertVideoPath" parameterType="java.util.List">
		insert into dormitory_media (dormitory_id, media_type, media_path, `index`) values
		<foreach collection="list" item="item" index="index" open="" close="" separator=",">
			(#{item.dormitoryId}, 2, #{item.path}, #{index})
		</foreach>
	</insert>

	<delete id="removeMediaPath" parameterType="int">
		delete from dormitory_media where dormitory_id = #{dormitoryId};
	</delete>


	<!-- Service & Equipment ######################################################## -->

	<select id="selectService" resultType="string">
		select service
		from service
		where status = 1
		order by id asc
	</select>

	<select id="selectEquipment" resultType="string">
		select equipment
		from equipment
		where status = 1
		order by id asc
	</select>

	<!-- RoomType & ContractType ###################################################### -->

	<select id="queryContractType" resultType="hashmap">
		select id, name from contract_type
	</select>

	<select id="queryRoomType" resultType="hashmap">
		select id, name from room_type
	</select>

	<!-- BrowseHistory ################################################################ -->

	<select id="selectBrowseHistiory" resultType="hashmap" parameterType="hashmap">
		select distinct t1.dormitory_id dormitoryId, t2.name
		from browsing_history t1
		left join dormitory t2 on t1.dormitory_id = t2.id
		where t1.user_id =
		#{userId}
		<if test="id != null">
			and t1.dormitory_id != #{id}
		</if>
		order by t1.id desc
		limit 0, 5
	</select>

	<insert id="insertBrowseHistory" keyProperty="id" useGeneratedKeys='true' parameterType="hashmap">
		insert into browsing_history (dormitory_id, user_id) values (
			#{dormitoryId,javaType=int,jdbcType=INTEGER}, #{userId,javaType=int,jdbcType=INTEGER}
		)
	</insert>

	<!-- Rating & Comment#################################################################### -->

	<insert id="rate" keyProperty="id" useGeneratedKeys='true' parameterType="com.noeasy.money.model.DormitoryRateBean">
		insert into dormitory_rating (dormitory_id, user_id, alias, score, comment, update_time, status) values (
			#{dormitoryId,javaType=int,jdbcType=INTEGER},
			#{userId,javaType=int,jdbcType=INTEGER},
			#{alias,javaType=string,jdbcType=VARCHAR},
			#{point,javaType=int,jdbcType=INTEGER},
			#{comment,javaType=string,jdbcType=VARCHAR},
			#{updateTime,javaType=java.sql.Timestamp,jdbcType=TIMESTAMP},
			#{status}
		)
	</insert>

	<update id="updateRate" parameterType="com.noeasy.money.model.DormitoryRateBean">
		update dormitory_rating set
			score = #{point},
			comment = #{comment},
			alias = #{alias},
			status = #{status}
		where id = #{id}
	</update>

	<select id="selectRates" parameterType="int" resultMap="dormitoryRate">
		select id dr_id, dormitory_id dr_dormitoryId, user_id dr_userId, alias dr_alias, score dr_point, comment dr_comment, create_time dr_createTime, status dr_status
		from dormitory_rating
		where dormitory_id = #{dormitoryId}
	</select>

	<!-- Calculate Distance ################################################################ -->
	<delete id="clearDistanceResult">
		DELETE FROM distance_result;
	</delete>

	<insert id="initialDistanceResult">
		INSERT INTO distance_result(city_id, college_id, dormitory_id, distance, create_time, update_time)
		SELECT t2.city_id, t2.college_id,
		t2.dormitory_id, 2*R*ASIN(d/2/R) AS distance, now() AS create_time, now() AS update_time
		FROM (SELECT 6378 AS R) t0,
		(SELECT t1.city_id,
		t1.college_id, t1.dormitory_id, SQRT(dx*dx+dy*dy+dz*dz) AS d
		FROM (
		SELECT p1.x-p2.x AS dx, p1.y-p2.y AS dy, p1.z-p2.z AS dz, p1.city_id,
		p1.college_id, p2.dormitory_id
		FROM view_college_glb p1
		INNER JOIN view_dormitory_glb p2
		ON p1.city_id = p2.city_id
		) t1) t2;
	</insert>

	<delete id="clearDistanceResult4City" parameterType='int'>
		DELETE FROM distance_result WHERE city_id = #{id};
	</delete>

	<insert id="calculateDistance4City" parameterType='int'>
		INSERT INTO distance_result(city_id, college_id, dormitory_id, distance, create_time,
		update_time)
		SELECT t2.city_id, t2.college_id, t2.dormitory_id, 2*R*ASIN(d/2/R) AS distance,
		now() AS create_time, now() AS update_time
		FROM (SELECT
		6378 AS R) t0,
		(SELECT t1.city_id, t1.college_id, t1.dormitory_id, SQRT(dx*dx+dy*dy+dz*dz) AS d
		FROM (
		SELECT p1.x-p2.x AS dx, p1.y-p2.y AS dy,
		p1.z-p2.z AS dz, p1.city_id,
		p1.college_id, p2.dormitory_id
		FROM view_college_glb p1
		INNER JOIN view_dormitory_glb p2
		ON p1.city_id = p2.city_id AND
		p1.city_id = #{cityId}
		) t1) t2;
	</insert>

	<delete id="clearDistanceResult4College" parameterType='int'>
		DELETE FROM distance_result WHERE college_id = #{id};
	</delete>


	<delete id="clearDistanceResult4Dormitory" parameterType='int'>
		DELETE FROM distance_result WHERE dormitory_id = #{id};
	</delete>

	<insert id="calculateDistance4College" parameterType='int'>
		INSERT INTO distance_result(city_id, college_id, dormitory_id, distance, create_time,
		update_time)
		SELECT t2.city_id, t2.college_id, t2.dormitory_id, 2*R*ASIN(d/2/R) AS distance,
		now() AS create_time, now() AS update_time
		FROM (SELECT
		6378 AS R) t0,
		(SELECT t1.city_id, t1.college_id, t1.dormitory_id, SQRT(dx*dx+dy*dy+dz*dz) AS d
		FROM (
		SELECT p1.x-p2.x AS dx, p1.y-p2.y AS dy,
		p1.z-p2.z AS dz, p1.city_id,
		p1.college_id, p2.dormitory_id
		FROM view_college_glb p1
		INNER JOIN view_dormitory_glb p2
		ON p1.city_id = p2.city_id AND
		p1.college_id = #{collegeId}
		) t1) t2;
	</insert>


	<insert id="calculateDistance4Dormitory" parameterType='int'>
		INSERT INTO distance_result(city_id, college_id, dormitory_id, distance, create_time,
		update_time)
		SELECT t2.city_id, t2.college_id, t2.dormitory_id, 2*R*ASIN(d/2/R) AS distance,
		now() AS create_time, now() AS update_time
		FROM (SELECT
		6378 AS R) t0,
		(SELECT t1.city_id, t1.college_id, t1.dormitory_id, SQRT(dx*dx+dy*dy+dz*dz) AS d
		FROM (
		SELECT p1.x-p2.x AS dx, p1.y-p2.y AS dy,
		p1.z-p2.z AS dz, p1.city_id,
		p1.college_id, p2.dormitory_id
		FROM view_college_glb p1
		INNER JOIN view_dormitory_glb p2
		ON p1.city_id = p2.city_id AND
		p2.dormitory_id = #{dormitoryId}
		) t1) t2;
	</insert>
	<select id="findRoomInfoById" resultMap="roomInfo2" parameterType="int">
		select room_info.id as ri_id, room_info.dormitory_id as ri_dormitory_id, room_info.room_type_id as ri_room_type_id, 
		room_info.description as ri_description, room_info.checkin_date as ri_checkin_date, room_info.orientations as ri_orientations, 
		room_info.floors as ri_floors, room_info.bed_type as ri_bed_type, room_info.house_area as ri_house_area, room_info.ensuite_bathroom as ri_ensuite_bathroom, 
		room_info.kitchen_people_number as ri_kitchen_people_number, room_info.floor_arrangement as ri_floor_arrangement, 
		room_info.orientation_arrangement as ri_orientation_arrangement, room_info.room_language_arrangement as ri_language_arrangement, 
		room_info.kitchen_equipment as ri_kitchen_equipment, room_info.bathroom_equipment as ri_bathroom_equipment, room_info.status as ri_status 
		from room_info
		where id = #{id}
	</select>
	
	<select id="findRoomPrice" resultMap="roomPrice2" parameterType="com.noeasy.money.model.RoomPriceSearchBean">
		select room_price.id, room_info_id, contract_type_id, currency, listPrice, salePrice, contract_type.name as contract
		from room_price
		inner join contract_type on room_price.contract_type_id = contract_type.id
		where status = 1 and room_info_id = #{roomInfoId} and contract_type_id = #{contractId}
	</select>
	
	<!-- Result Map ############################################### -->
	<resultMap id="roomPrice2" type="com.noeasy.money.model.RoomPrice">
		<id property="id" column="id" />
		<result property="roomInfoId" column="room_info_id" />
		<result property="contractId" column="contract_type_id" />
		<result property="currency" column="currency" />
		<result property="listPrice" column="listPrice" />
		<result property="salePrice" column="salePrice" />
		<result property="contract" column="contract" />
	</resultMap>
	
	<resultMap id="roomInfo2" type="com.noeasy.money.model.RoomInfoBean">
		<id property="id" column="ri_id" />
		<result property="dormitoryId" column="ri_dormitory_id" />
		<result property="roomTypeId" column="ri_room_type_id" />
		<result property="roomType" column="ri_room_type" />
		<result property="description" column="ri_description" />
		<result property="checkinDate" column="ri_checkin_date" />
		<result property="orientation" column="ri_orientations" />
		<result property="floors" column="ri_floors" />
		<result property="bedType" column="ri_bed_type" />
		<result property="houseArea" column="ri_house_area" />
		<result property="ensuitBathroom" column="ri_ensuite_bathroom" />
		<result property="kitchenPeople" column="ri_kitchen_people_number" />
		<result property="floorArrange" column="ri_floor_arrangement" />
		<result property="orientationArrange" column="ri_orientation_arrangement" />
		<result property="roomLanguageArrange" column="ri_language_arrangement" />
		<result property="kitchenEquipment" column="ri_kitchen_equipment" />
		<result property="bathroomEquipment" column="ri_bathroom_equipment" />
		<result property="status" column="ri_status" />
	</resultMap>
	
	
	<resultMap id="dormitory" type="com.noeasy.money.model.DormitoryBean">
		<id property="id" column="dor_id" />
		<result property="name" column="dor_name" />
		<result property="address" column="dor_address" />
		<result property="postcode" column="dor_postcode" />
		<result property="equipment" column="dor_equipment" />
		<result property="service" column="dor_service" />
		<result property="currency" column="dor_currency" />
		<result property="rating" column="dor_rating" />
		<result property="listPrice" column="dor_listPrice" />
		<result property="salePrice" column="dor_salePrice" />
		<result property="latitude" column="dor_latitude" />
		<result property="longitude" column="dor_longitude" />
		<result property="description" column="dor_description" />
		<result property="cityId" column="dor_cityId" />
		<result property="city" column="dor_city" />
		<result property="distance" column="dor_distance" />
		<result property="rating" column="dor_rating" />
		<result property="status" column="dor_status" />
		<collection property="rooms" resultMap="roomInfo" />
	</resultMap>

	<resultMap id="roomInfo" type="com.noeasy.money.model.RoomInfoBean">
		<id property="id" column="ri_id" />
		<result property="dormitoryId" column="ri_dormitoryId" />
		<result property="roomTypeId" column="ri_roomTypeId" />
		<result property="roomType" column="ri_roomType" />
		<result property="service" column="ri_service" />
		<result property="equipment" column="ri_equipment" />
		<result property="description" column="ri_description" />
		<result property="checkinDate" column="ri_checkinDate" />
		<result property="orientation" column="ri_orientation" />
		<result property="floors" column="ri_floors" />
		<result property="bedType" column="ri_bedType" />
		<result property="houseArea" column="ri_houseArea" />
		<result property="ensuitBathroom" column="ri_ensuitBathroom" />
		<result property="kitchenPeople" column="ri_kitchenPeople" />
		<result property="floorArrange" column="ri_floorArrange" />
		<result property="orientationArrange" column="ri_orientationArrange" />
		<result property="roomLanguageArrange" column="ri_roomLanguageArrange" />
		<result property="kitchenEquipment" column="ri_kitchenEquipment" />
		<result property="bathroomEquipment" column="ri_bathroomEquipment" />
		<result property="status" column="ri_status" />
		<collection property="contractPrice" resultMap="roomPrice" />
	</resultMap>

	<resultMap id="roomPrice" type="com.noeasy.money.model.RoomPrice">
		<id property="id" column="rp_id" />
		<result property="roomInfoId" column="rp_roomInfoId" />
		<result property="currency" column="rp_currency" />
		<result property="listPrice" column="rp_listPrice" />
		<result property="salePrice" column="rp_salePrice" />
		<result property="contractId" column="rp_contractId" />
		<result property="contract" column="rp_contract" />
		<result property="status" column="rp_status" />
	</resultMap>

	<resultMap id="dormitoryRate" type="com.noeasy.money.model.DormitoryRateBean">
		<id property="id" column="dr_id" />
		<result property="userId" column="dr_userId" />
		<result property="dormitoryId" column="dr_dormitoryId" />
		<result property="point" column="dr_point" />
		<result property="comment" column="dr_comment" />
		<result property="alias" column="dr_alias" />
		<result property="createTime" column="dr_createTime" />
		<result property="status" column="dr_status" />
	</resultMap>

</mapper>
